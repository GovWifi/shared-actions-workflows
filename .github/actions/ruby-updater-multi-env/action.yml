name: "Update Ruby"
description: "Updates Ruby version"

runs:
  using: composite
  steps:
  # Pull update from git, switch to branch
  - name: checkout update branch
    shell: bash
    run: git fetch && git switch ${{ env.COMMIT_BRANCH }}

  - name: Set up Ruby
    uses: ruby/setup-ruby@v1
    with:
      ruby-version: ${{ env.TARGET_RUBY_VERSION }}

  # run the text replacements on the .ruby version and docker file.
  - name: Update Ruby versions
    shell: bash
    run: |
      ## convert path variable into array
      ruby_paths="${{env.RUBY_PATHS}}" ## read in env variable
      paths_array=(${ruby_paths}) ## convert tring to array
      ## check if root if included, add if not.
      if [[ ! " ${paths_array[*]} " =~ [[:space:]]"./"[[:space:]] ]]; then
        echo "doesn't contain root, so will add to catch lone Dockerfiles in root"
        paths_array+=("./")
      fi
      ## Loop paths
      for path in "${paths_array[@]}"; do

        ## pushd automatically manages a directory stack.
        if ! pushd "$path" > /dev/null; then
          echo "!!! ERROR: Could not change directory to $path. Exiting."
          exit 1;
        else
          echo "Switched to $path"
        fi

        ## update .ruby file
        if [ -e ".ruby-version" ]; then
          sed -i s/\[0-9\]\\.\[0-9\]\\.\[0-9\]/'${{ env.TARGET_RUBY_VERSION }}'/ .ruby-version
        fi

        ## update docker file if exists
        if [ -e "Dockerfile" ]; then
          sed -i s/FROM ruby:[0-9.]*\(-.*\)\?/FROM ruby:${{ env.TARGET_RUBY_VERSION }}\1/" Dockerfile
        fi

        ## Update gemfile if exists
        if [ -e "Gemfile" ]; then
          ## attempt to run bundle install
          if ! bundle update --ruby; then
            echo "!!! ERROR: bundle update FAILED in $path !!!"
            echo "So have to brute force it"
            echo "Remove and rebuild Gem lock file."
            rm Gemfile.lock
            echo "Gemfile.lock removed"
            bundle install
            echo "Reinstalled Gems and dependencies"
          else
            echo "Bundle update Successful!"
          fi
        fi
        # Pop back to the original directory
        popd > /dev/null
      done
