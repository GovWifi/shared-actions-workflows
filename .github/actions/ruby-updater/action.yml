name: "Check and update Ruby"
description: "Checks and updates Ruby version, if no updated detected it will exit with fail, as there is no clean way to exit a github action."

inputs:
  github-token:
    description: 'GitHub token for creating pull requests'
    required: true
    default: ${{ github.token }}
  main-branch:
    description: 'The name of the main branch, while we slowly migrate from using master to main, default master'
    required: false
    default: 'master'
  ruby-path:
    description: 'The path/directory where the ruby version config files are located, default root'
    required: false
    default: '.'

runs:
  using: composite
  steps:

  - name: Setup User Env
    shell: bash
    run: |
      git config --local user.email "github-actions[bot]@users.noreply.github.com"
      git config --local user.name "github-actions[bot]"

  - name: Check out code
    uses: actions/checkout@v4

  - name: Determine target Ruby version
    id: get-ruby-version
    shell: bash
    run: |
      LATEST_RUBY=$(curl -s https://api.github.com/repos/ruby/ruby/releases/latest | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/' | tr '_' '.')
      echo "TARGET_RUBY_VERSION=$LATEST_RUBY" >> "$GITHUB_OUTPUT"

  - name: Check if Ruby is updated
    shell: bash
    run: |
      if grep -q "${{ steps.get-ruby-version.outputs.TARGET_RUBY_VERSION }}" ".ruby-version" ; then
        echo "Ruby Version Match, nothing to do, exiting."
        exit 1
      else
        echo "Current version of Ruby: $(cat .ruby-version) is different from latest: ${{ steps.get-ruby-version.outputs.TARGET_RUBY_VERSION }} continue to update."
      fi

  - name: set branch name
    id: set-branch-name
    shell: bash
    run: echo "BRANCH_NAME=update-to-ruby-${{ steps.get-ruby-version.outputs.TARGET_RUBY_VERSION }}" >> "$GITHUB_OUTPUT"

  - name: check if branch exists
    id: check-branch-name
    shell: bash
    run: |
      if [ `git branch --list ${{ steps.set-branch-name.outputs.BRANCH_NAME }}` ] ; then
        echo "Branch ${{ steps.set-branch-name.outputs.BRANCH_NAME }} already exists, remove it and re run"
        exit 1
      else
        echo "No branch match, so will create"
      fi

  - name: Create upgrade branch
    shell: bash
    run: |
      git checkout -b ${{ steps.set-branch-name.outputs.BRANCH_NAME }}

  - name: Set up Ruby
    uses: ruby/setup-ruby@v1
    with:
      ruby-version: ${{ steps.get-ruby-version.outputs.TARGET_RUBY_VERSION }}

  - name: move to ruby path/directory
    shell: bash
    run: cd ${{inputs.ruby-path}}/

  - name: Update Ruby versions
    shell: bash
    run: |
      sed -i s/\[0-9\]\\.\[0-9\]\\.\[0-9\]/'${{ steps.get-ruby-version.outputs.TARGET_RUBY_VERSION }}'/ .ruby-version
      echo "Updated .ruby-version file"
      ## update docker file if exists
      if [ -e "Dockerfile" ]; then
        sed -i s/\[0-9\]\\.\[0-9\]\\.\[0-9\]/'${{ steps.get-ruby-version.outputs.TARGET_RUBY_VERSION }}'/ Dockerfile
      fi
      echo "Updated DockerFile"

  - name: Attempt to run bundle update
    id: bundle-update
    shell: bash
    run: |
      gem install bundler
      bundle install
      bundle update --ruby
      echo "Updated Gemfile and dependencies"
    continue-on-error: true

  - name: Check on update failure
    shell: bash
    if: steps.bundle-update.outcome != 'success'
    run: |
      echo "Bundle Update didn't work, so have to brute force it"
      echo "Remove and rebuild lock file."
      rm Gemfile.lock
      echo "Gemfile.lock removed"
      gem install bundler
      bundle install
      echo "Reinstalled Gems and dependencies"

  - name: Check for changes
    shell: bash
    id: check_changes
    run: |
      if [[ -n "$(git status --porcelain)" ]]; then
        echo "has_changes=true" >> $GITHUB_OUTPUT
      else
        echo "has_changes=false" >> $GITHUB_OUTPUT
      fi

  - name: Commit changes
    if: steps.check_changes.outputs.has_changes == 'true'
    shell: bash
    run: |
      if git ls-remote --exit-code --heads origin " ${{ steps.set-branch-name.outputs.BRANCH_NAME }}"; then
        git push origin --delete "${{ steps.set-branch-name.outputs.BRANCH_NAME }}"
      fi
      git add .
      git commit -m "chore: Update Ruby to version ${{ steps.get-ruby-version.outputs.TARGET_RUBY_VERSION }}"
      git push -u origin ${{ steps.set-branch-name.outputs.BRANCH_NAME }}

  - name: Create Pull Request
    if: steps.check_changes.outputs.has_changes == 'true'
    shell: bash
    run: |
      PR_BODY="This PR updates the Ruby version to ${{ steps.get-ruby-version.outputs.TARGET_RUBY_VERSION }}.

      Changes made:
      - Updated .ruby-version file
      - Updated Gemfile ruby version
      - Updated Dockerfile ruby version
      - Rebuilt Gemfile.lock dependencies (if Bundle Update failed)
      - To run tests, convert the draft PR to an Open PR.

      Please review and test before merging."

      gh pr create \
        --draft
        --title "Update Ruby to version ${{ steps.get-ruby-version.outputs.TARGET_RUBY_VERSION }}" \
        --body "$PR_BODY" \
        --base ${{inputs.main-branch}} \
        --head ${{ steps.set-branch-name.outputs.BRANCH_NAME }}
    env:
      GH_TOKEN: ${{ inputs.github-token }}
